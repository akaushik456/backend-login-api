(()=>{var e={37:e=>{"use strict";e.exports=require("mongoose")},252:e=>{"use strict";e.exports=require("express")},486:e=>{"use strict";e.exports=require("bcrypt")},577:e=>{"use strict";e.exports=require("cors")},763:e=>{"use strict";e.exports=require("express-rate-limit")},805:(e,s,r)=>{const o=r(37),t=r(486),n=new o.Schema({email:{type:String,required:!0,unique:!0},password:{type:String,required:!0}});n.methods.matchPassword=async function(e){return await t.compare(e,this.password)};const a=o.model("User",n);e.exports=a},818:e=>{"use strict";e.exports=require("dotenv")},829:e=>{"use strict";e.exports=require("jsonwebtoken")}},s={};function r(o){var t=s[o];if(void 0!==t)return t.exports;var n=s[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r(818).config();const o=r(252),t=r(577),n=r(37),a=r(486),i=r(829),c=r(763),u=r(805),l=o(),g=process.env.JWT_SECRET||"fallback_secret";l.use(o.json()),l.use(t()),n.connect("mongodb://localhost:27017/your-database",{useNewUrlParser:!0,useUnifiedTopology:!0}).then(()=>console.log("✅ Connected to MongoDB")).catch(e=>console.error("❌ MongoDB Connection Error:",e)),l.get("/",(e,s)=>{s.send("🚀 Server is running!")});const d=c({windowMs:9e5,max:10,message:"Too many login attempts, try again later."});l.post("/api/auth/register",async(e,s)=>{console.log("📥 Register Request Received:",e.body);try{const{name:r,email:o,password:t}=e.body;if(!r||!o||!t)return console.log("⚠️ Missing fields:",{name:r,email:o,password:t}),s.status(400).json({message:"All fields are required."});console.log("🔍 Checking if user already exists...");const n=await u.findOne({email:o.toLowerCase().trim()});if(n)return console.log("⚠️ User already exists:",n.email),s.status(400).json({message:"User already exists."});console.log("🔐 Hashing password...");const c=await a.hash(t,10);console.log("🆕 Creating new user...");const l=new u({name:r,email:o.toLowerCase().trim(),password:c});await l.save(),console.log("✅ User saved successfully!");const d=i.sign({userId:l._id,email:l.email},g,{expiresIn:"1h"});s.status(201).json({message:"User registered successfully!",token:d})}catch(e){console.error("❌ Register Error:",e),s.status(500).json({message:"Internal server error."})}}),l.post("/api/auth/login",d,async(e,s)=>{console.log("📥 Login Request Body:",e.body);try{const{email:r,password:o}=e.body;if(!r||!o)return s.status(400).json({message:"Email and password are required."});const t=await u.findOne({email:r.toLowerCase().trim()});if(!t)return s.status(400).json({message:"Invalid credentials."});if(!await a.compare(o,t.password))return s.status(400).json({message:"Invalid credentials."});const n=i.sign({userId:t._id,email:t.email},g,{expiresIn:"1h"});s.json({message:"Login successful!",token:n})}catch(e){console.error("❌ Login Error:",e),s.status(500).json({message:"Internal server error."})}}),l.post("/api/auth/logout",(e,s)=>{try{s.clearCookie("token"),s.json({message:"Logout successful!"})}catch(e){console.error("❌ Logout Error:",e),s.status(500).json({message:"Internal server error."})}}),l.get("/api/auth/check-session",(e,s,r)=>{const o=e.header("Authorization")?.split(" ")[1];if(!o)return s.status(401).json({message:"Unauthorized"});i.verify(o,g,(o,t)=>{if(o)return s.status(403).json({message:"Invalid token"});e.user=t,r()})},(e,s)=>{s.json({message:"Session active",user:e.user})});const m=process.env.PORT||5e3;l.listen(m,()=>{console.log(`🚀 Server running on http://localhost:${m}`)})})();